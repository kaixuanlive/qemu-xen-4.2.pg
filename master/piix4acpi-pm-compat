diff -r 026593a6601e hw/piix4acpi.c
--- a/hw/piix4acpi.c	Thu Mar 17 19:14:54 2011 +0000
+++ b/hw/piix4acpi.c	Thu Mar 17 19:16:13 2011 +0000
@@ -53,12 +53,9 @@
 
 /* Sleep state type codes as defined by the \_Sx objects in the DSDT. */
 /* These must be kept in sync with the DSDT (hvmloader/acpi/dsdt.asl) */
-#define SLP_TYP_S4_V0     (6 << 10)
-#define SLP_TYP_S3_V0     (5 << 10)
-#define SLP_TYP_S5_V0     (7 << 10)
-#define SLP_TYP_S4_V1     (0 << 10)
-#define SLP_TYP_S3_V1     (1 << 10)
-#define SLP_TYP_S5_V1     (0 << 10)
+#define SLP_TYP_S4        (6 << 10)
+#define SLP_TYP_S3        (5 << 10)
+#define SLP_TYP_S5        (7 << 10)
 
 #define ACPI_DBG_IO_ADDR  0xb044
 #define ACPI_PHP_IO_ADDR  0x10c0
@@ -81,14 +78,12 @@
 typedef struct PCIAcpiState {
     PCIDevice dev;
     uint16_t pm1_control; /* pm1a_ECNT_BLK */
-
-    uint32_t pm1a_evt_blk_address;
 } PCIAcpiState;
 
 typedef struct GPEState {
     /* GPE0 block */
-    uint8_t gpe0_sts[ACPI_GPE0_BLK_LEN_V0 / 2];
-    uint8_t gpe0_en[ACPI_GPE0_BLK_LEN_V0 / 2];
+    uint8_t gpe0_sts[ACPI_GPE0_BLK_LEN / 2];
+    uint8_t gpe0_en[ACPI_GPE0_BLK_LEN / 2];
 
     /* CPU bitmap */
     uint8_t cpus_sts[32];
@@ -96,8 +91,6 @@ typedef struct GPEState {
     /* SCI IRQ level */
     uint8_t sci_asserted;
 
-    uint32_t gpe0_blk_address;
-    uint32_t gpe0_blk_half_len;
 } GPEState;
 
 static GPEState gpe_state;
@@ -110,9 +103,6 @@ typedef struct PHPDevFn {
                                       * PSTB in ASL */
 } PHPDevFn;
 
-static void acpi_map(PCIDevice *pci_dev, int region_num,
-                     uint32_t addr, uint32_t size, int type);
-
 static PHPDevFn php_devfn;
 int s3_shutdown_flag;
 static qemu_irq sci_irq;
@@ -151,7 +141,6 @@ static void piix4acpi_save(QEMUFile *f, 
     PCIAcpiState *s = opaque;
     pci_device_save(&s->dev, f);
     qemu_put_be16s(f, &s->pm1_control);
-    qemu_put_be32s(f, &s->pm1a_evt_blk_address);
 }
 
 static int piix4acpi_load(QEMUFile *f, void *opaque, int version_id)
@@ -160,7 +149,7 @@ static int piix4acpi_load(QEMUFile *f, v
     int ret;
     uint32_t pm1a_evt_address_assigned;
 
-    if (version_id > 2)
+    if (version_id > 1)
         return -EINVAL;
     if (loadvm_version_id > 1) {
         ret = pci_device_load(&s->dev, f);
@@ -169,20 +158,6 @@ static int piix4acpi_load(QEMUFile *f, v
     }
     qemu_get_be16s(f, &s->pm1_control);
 
-    pm1a_evt_address_assigned = s->pm1a_evt_blk_address;
-    if (version_id <= 1) {
-        /* map to old ioport instead of the new one */
-        s->pm1a_evt_blk_address = ACPI_PM1A_EVT_BLK_ADDRESS_V0;
-    } else {
-        qemu_get_be32s(f, &s->pm1a_evt_blk_address);
-    }
-
-    if (s->pm1a_evt_blk_address != pm1a_evt_address_assigned) {
-        PIIX4ACPI_LOG(PIIX4ACPI_LOG_DEBUG, "ACPI: Change firmware IOPorts mapping.\n");
-        /* unmap new ioport to use old ioport */
-        isa_unassign_ioport(pm1a_evt_address_assigned + 4, 2);
-        acpi_map((PCIDevice *)s, 0, s->pm1a_evt_blk_address, 0x10, PCI_ADDRESS_SPACE_IO);
-    }
     return 0;
 }
 
@@ -434,15 +409,13 @@ static void acpi_shutdown(uint32_t val)
         return;
 
     switch (val & SLP_TYP_Sx) {
-    case SLP_TYP_S3_V0:
-    case SLP_TYP_S3_V1:
+    case SLP_TYP_S3:
         acpi_s3();
         break;
-    case SLP_TYP_S4_V0:
+    case SLP_TYP_S4:
         acpi_s4();
         break;
-    case SLP_TYP_S5_V0:
-    case SLP_TYP_S5_V1:
+    case SLP_TYP_S5:
         acpi_s5();
         break;
     default:
@@ -663,7 +636,9 @@ static uint32_t gpe_sts_read(void *opaqu
 {
     GPEState *s = opaque;
 
-    return s->gpe0_sts[addr - s->gpe0_blk_address];
+    PIIX4ACPI_LOG(PIIX4ACPI_LOG_DEBUG, "gpe_sts_read: addr=0x%x, val=0x%x.\n",
+                  addr, s->gpe0_sts[addr - ACPI_GPE0_BLK_ADDRESS]);
+    return s->gpe0_sts[addr - ACPI_GPE0_BLK_ADDRESS];
 }
 
 /* write 1 to clear specific GPE bits */
@@ -675,7 +650,7 @@ static void gpe_sts_write(void *opaque, 
     PIIX4ACPI_LOG(PIIX4ACPI_LOG_DEBUG, "gpe_sts_write: addr=0x%x, val=0x%x.\n", addr, val);
 
     hotplugged = test_bit(&s->gpe0_sts[0], ACPI_PHP_GPE_BIT);
-    s->gpe0_sts[addr - s->gpe0_blk_address] &= ~val;
+    s->gpe0_sts[addr - ACPI_GPE0_BLK_ADDRESS] &= ~val;
     if ( s->sci_asserted &&
          hotplugged &&
          !test_bit(&s->gpe0_sts[0], ACPI_PHP_GPE_BIT)) {
@@ -689,7 +664,9 @@ static uint32_t gpe_en_read(void *opaque
 {
     GPEState *s = opaque;
 
-    return s->gpe0_en[addr - (s->gpe0_blk_address + s->gpe0_blk_half_len)];
+    PIIX4ACPI_LOG(PIIX4ACPI_LOG_DEBUG, "gpe_en_read: addr=0x%x, val=0x%x.\n",
+                  addr, s->gpe0_en[addr - (ACPI_GPE0_BLK_ADDRESS + ACPI_GPE0_BLK_LEN / 2)]);
+    return s->gpe0_en[addr - (ACPI_GPE0_BLK_ADDRESS + ACPI_GPE0_BLK_LEN / 2)];
 }
 
 /* write 0 to clear en bit */
@@ -699,7 +676,7 @@ static void gpe_en_write(void *opaque, u
     int reg_count;
 
     PIIX4ACPI_LOG(PIIX4ACPI_LOG_DEBUG, "gpe_en_write: addr=0x%x, val=0x%x.\n", addr, val);
-    reg_count = addr - (s->gpe0_blk_address + s->gpe0_blk_half_len);
+    reg_count = addr - (ACPI_GPE0_BLK_ADDRESS + ACPI_GPE0_BLK_LEN / 2);
     s->gpe0_en[reg_count] = val;
     /* If disable GPE bit right after generating SCI on it, 
      * need deassert the intr to avoid redundant intrs
@@ -719,7 +696,7 @@ static void gpe_save(QEMUFile* f, void* 
     GPEState *s = (GPEState*)opaque;
     int i;
 
-    for ( i = 0; i < ACPI_GPE0_BLK_LEN_V0 / 2; i++ ) {
+    for ( i = 0; i < ACPI_GPE0_BLK_LEN / 2; i++ ) {
         qemu_put_8s(f, &s->gpe0_sts[i]);
         qemu_put_8s(f, &s->gpe0_en[i]);
     }
@@ -728,54 +705,21 @@ static void gpe_save(QEMUFile* f, void* 
     if ( s->sci_asserted ) {
         PIIX4ACPI_LOG(PIIX4ACPI_LOG_INFO, "gpe_save with sci asserted!\n");
     }
-
-    qemu_put_be32s(f, &s->gpe0_blk_address);
-    qemu_put_be32s(f, &s->gpe0_blk_half_len);
 }
 
 static int gpe_load(QEMUFile* f, void* opaque, int version_id)
 {
     GPEState *s = (GPEState*)opaque;
     int i;
-    uint32_t gpe0_addr_assigned;
-    uint32_t gpe0_half_len_assigned;
-
-    if (version_id > 2)
+    if (version_id != 1)
         return -EINVAL;
 
-    for ( i = 0; i < ACPI_GPE0_BLK_LEN_V0 / 2; i++ ) {
+    for ( i = 0; i < ACPI_GPE0_BLK_LEN / 2; i++ ) {
         qemu_get_8s(f, &s->gpe0_sts[i]);
         qemu_get_8s(f, &s->gpe0_en[i]);
     }
 
     qemu_get_8s(f, &s->sci_asserted);
-
-    gpe0_addr_assigned = s->gpe0_blk_address;
-    gpe0_half_len_assigned = s->gpe0_blk_half_len;
-
-    if (version_id <= 1) {
-        s->gpe0_blk_address = ACPI_GPE0_BLK_ADDRESS_V0;
-        s->gpe0_blk_half_len = ACPI_GPE0_BLK_LEN_V0 / 2;
-    } else {
-        qemu_get_be32s(f, &s->gpe0_blk_address);
-        qemu_get_be32s(f, &s->gpe0_blk_half_len);
-    }
-
-    if (gpe0_addr_assigned != s->gpe0_blk_address ||
-        gpe0_half_len_assigned != s->gpe0_blk_half_len) {
-        isa_unassign_ioport(gpe0_addr_assigned, gpe0_half_len_assigned * 2);
-
-        register_ioport_read(s->gpe0_blk_address, s->gpe0_blk_half_len,
-                             1, gpe_sts_read, s);
-        register_ioport_read(s->gpe0_blk_address + s->gpe0_blk_half_len,
-                             s->gpe0_blk_half_len, 1, gpe_en_read, s);
-
-        register_ioport_write(s->gpe0_blk_address, s->gpe0_blk_half_len,
-                              1, gpe_sts_write, s);
-        register_ioport_write(s->gpe0_blk_address + s->gpe0_blk_half_len,
-                              s->gpe0_blk_half_len, 1, gpe_en_write, s);
-    }
-
     return 0;
 }
 
@@ -822,32 +766,29 @@ static void gpe_acpi_init(void)
     register_ioport_read(PROC_BASE, 32, 1,  gpe_cpus_readb, s);
     register_ioport_write(PROC_BASE, 32, 1, gpe_cpus_writeb, s);
 
-    s->gpe0_blk_address = ACPI_GPE0_BLK_ADDRESS_V1;
-    s->gpe0_blk_half_len = ACPI_GPE0_BLK_LEN_V1 / 2;
-
-    register_ioport_read(s->gpe0_blk_address,
-                         s->gpe0_blk_half_len,
+    register_ioport_read(ACPI_GPE0_BLK_ADDRESS,
+                         ACPI_GPE0_BLK_LEN / 2,
                          1,
                          gpe_sts_read,
                          s);
-    register_ioport_read(s->gpe0_blk_address + s->gpe0_blk_half_len,
-                         s->gpe0_blk_half_len,
+    register_ioport_read(ACPI_GPE0_BLK_ADDRESS + ACPI_GPE0_BLK_LEN / 2,
+                         ACPI_GPE0_BLK_LEN / 2,
                          1,
                          gpe_en_read,
                          s);
 
-    register_ioport_write(s->gpe0_blk_address,
-                          s->gpe0_blk_half_len,
+    register_ioport_write(ACPI_GPE0_BLK_ADDRESS,
+                          ACPI_GPE0_BLK_LEN / 2,
                           1,
                           gpe_sts_write,
                           s);
-    register_ioport_write(s->gpe0_blk_address + s->gpe0_blk_half_len,
-                          s->gpe0_blk_half_len,
+    register_ioport_write(ACPI_GPE0_BLK_ADDRESS + ACPI_GPE0_BLK_LEN / 2,
+                          ACPI_GPE0_BLK_LEN / 2,
                           1,
                           gpe_en_write,
                           s);
 
-    register_savevm("gpe", 0, 2, gpe_save, gpe_load, s);
+    register_savevm("gpe", 0, 1, gpe_save, gpe_load, s);
 }
 
 #ifdef CONFIG_PASSTHROUGH
@@ -999,8 +940,7 @@ i2c_bus *piix4_pm_init(PCIBus *bus, int 
     pci_conf[0x43] = 0x00;
     d->pm1_control = SCI_EN;
 
-    d->pm1a_evt_blk_address = ACPI_PM1A_EVT_BLK_ADDRESS_V1;
-    acpi_map((PCIDevice *)d, 0, d->pm1a_evt_blk_address, 0x10, PCI_ADDRESS_SPACE_IO);
+    acpi_map((PCIDevice *)d, 0, 0x1f40, 0x10, PCI_ADDRESS_SPACE_IO);
 
     gpe_acpi_init();
 #ifdef CONFIG_PASSTHROUGH
